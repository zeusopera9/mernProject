{"ast":null,"code":"var MediaQuery = require('./MediaQuery');\nvar Util = require('./Util');\nvar each = Util.each;\nvar isFunction = Util.isFunction;\nvar isArray = Util.isArray;\n\n/**\r\n * Allows for registration of query handlers.\r\n * Manages the query handler's state and is responsible for wiring up browser events\r\n *\r\n * @constructor\r\n */\nfunction MediaQueryDispatch() {\n  if (!window.matchMedia) {\n    throw new Error('matchMedia not present, legacy browsers require a polyfill');\n  }\n  this.queries = {};\n  this.browserIsIncapable = !window.matchMedia('only all').matches;\n}\nMediaQueryDispatch.prototype = {\n  constructor: MediaQueryDispatch,\n  /**\r\n   * Registers a handler for the given media query\r\n   *\r\n   * @param {string} q the media query\r\n   * @param {object || Array || Function} options either a single query handler object, a function, or an array of query handlers\r\n   * @param {function} options.match fired when query matched\r\n   * @param {function} [options.unmatch] fired when a query is no longer matched\r\n   * @param {function} [options.setup] fired when handler first triggered\r\n   * @param {boolean} [options.deferSetup=false] whether setup should be run immediately or deferred until query is first matched\r\n   * @param {boolean} [shouldDegrade=false] whether this particular media query should always run on incapable browsers\r\n   */\n  register: function (q, options, shouldDegrade) {\n    var queries = this.queries,\n      isUnconditional = shouldDegrade && this.browserIsIncapable;\n    if (!queries[q]) {\n      queries[q] = new MediaQuery(q, isUnconditional);\n    }\n\n    //normalise to object in an array\n    if (isFunction(options)) {\n      options = {\n        match: options\n      };\n    }\n    if (!isArray(options)) {\n      options = [options];\n    }\n    each(options, function (handler) {\n      if (isFunction(handler)) {\n        handler = {\n          match: handler\n        };\n      }\n      queries[q].addHandler(handler);\n    });\n    return this;\n  },\n  /**\r\n   * unregisters a query and all it's handlers, or a specific handler for a query\r\n   *\r\n   * @param {string} q the media query to target\r\n   * @param {object || function} [handler] specific handler to unregister\r\n   */\n  unregister: function (q, handler) {\n    var query = this.queries[q];\n    if (query) {\n      if (handler) {\n        query.removeHandler(handler);\n      } else {\n        query.clear();\n        delete this.queries[q];\n      }\n    }\n    return this;\n  }\n};\nmodule.exports = MediaQueryDispatch;","map":{"version":3,"names":["MediaQuery","require","Util","each","isFunction","isArray","MediaQueryDispatch","window","matchMedia","Error","queries","browserIsIncapable","matches","prototype","constructor","register","q","options","shouldDegrade","isUnconditional","match","handler","addHandler","unregister","query","removeHandler","clear","module","exports"],"sources":["C:/Users/lenovo/Desktop/KJ Somaiya/TY/MERN/mernProject/frontend/node_modules/enquire.js/src/MediaQueryDispatch.js"],"sourcesContent":["var MediaQuery = require('./MediaQuery');\r\nvar Util = require('./Util');\r\nvar each = Util.each;\r\nvar isFunction = Util.isFunction;\r\nvar isArray = Util.isArray;\r\n\r\n/**\r\n * Allows for registration of query handlers.\r\n * Manages the query handler's state and is responsible for wiring up browser events\r\n *\r\n * @constructor\r\n */\r\nfunction MediaQueryDispatch () {\r\n    if(!window.matchMedia) {\r\n        throw new Error('matchMedia not present, legacy browsers require a polyfill');\r\n    }\r\n\r\n    this.queries = {};\r\n    this.browserIsIncapable = !window.matchMedia('only all').matches;\r\n}\r\n\r\nMediaQueryDispatch.prototype = {\r\n\r\n    constructor : MediaQueryDispatch,\r\n\r\n    /**\r\n     * Registers a handler for the given media query\r\n     *\r\n     * @param {string} q the media query\r\n     * @param {object || Array || Function} options either a single query handler object, a function, or an array of query handlers\r\n     * @param {function} options.match fired when query matched\r\n     * @param {function} [options.unmatch] fired when a query is no longer matched\r\n     * @param {function} [options.setup] fired when handler first triggered\r\n     * @param {boolean} [options.deferSetup=false] whether setup should be run immediately or deferred until query is first matched\r\n     * @param {boolean} [shouldDegrade=false] whether this particular media query should always run on incapable browsers\r\n     */\r\n    register : function(q, options, shouldDegrade) {\r\n        var queries         = this.queries,\r\n            isUnconditional = shouldDegrade && this.browserIsIncapable;\r\n\r\n        if(!queries[q]) {\r\n            queries[q] = new MediaQuery(q, isUnconditional);\r\n        }\r\n\r\n        //normalise to object in an array\r\n        if(isFunction(options)) {\r\n            options = { match : options };\r\n        }\r\n        if(!isArray(options)) {\r\n            options = [options];\r\n        }\r\n        each(options, function(handler) {\r\n            if (isFunction(handler)) {\r\n                handler = { match : handler };\r\n            }\r\n            queries[q].addHandler(handler);\r\n        });\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * unregisters a query and all it's handlers, or a specific handler for a query\r\n     *\r\n     * @param {string} q the media query to target\r\n     * @param {object || function} [handler] specific handler to unregister\r\n     */\r\n    unregister : function(q, handler) {\r\n        var query = this.queries[q];\r\n\r\n        if(query) {\r\n            if(handler) {\r\n                query.removeHandler(handler);\r\n            }\r\n            else {\r\n                query.clear();\r\n                delete this.queries[q];\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n};\r\n\r\nmodule.exports = MediaQueryDispatch;\r\n"],"mappings":"AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAC,cAAc,CAAC;AACxC,IAAIC,IAAI,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAC5B,IAAIE,IAAI,GAAGD,IAAI,CAACC,IAAI;AACpB,IAAIC,UAAU,GAAGF,IAAI,CAACE,UAAU;AAChC,IAAIC,OAAO,GAAGH,IAAI,CAACG,OAAO;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,kBAAkB,GAAI;EAC3B,IAAG,CAACC,MAAM,CAACC,UAAU,EAAE;IACnB,MAAM,IAAIC,KAAK,CAAC,4DAA4D,CAAC;EACjF;EAEA,IAAI,CAACC,OAAO,GAAG,CAAC,CAAC;EACjB,IAAI,CAACC,kBAAkB,GAAG,CAACJ,MAAM,CAACC,UAAU,CAAC,UAAU,CAAC,CAACI,OAAO;AACpE;AAEAN,kBAAkB,CAACO,SAAS,GAAG;EAE3BC,WAAW,EAAGR,kBAAkB;EAEhC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIS,QAAQ,EAAG,UAASC,CAAC,EAAEC,OAAO,EAAEC,aAAa,EAAE;IAC3C,IAAIR,OAAO,GAAW,IAAI,CAACA,OAAO;MAC9BS,eAAe,GAAGD,aAAa,IAAI,IAAI,CAACP,kBAAkB;IAE9D,IAAG,CAACD,OAAO,CAACM,CAAC,CAAC,EAAE;MACZN,OAAO,CAACM,CAAC,CAAC,GAAG,IAAIhB,UAAU,CAACgB,CAAC,EAAEG,eAAe,CAAC;IACnD;;IAEA;IACA,IAAGf,UAAU,CAACa,OAAO,CAAC,EAAE;MACpBA,OAAO,GAAG;QAAEG,KAAK,EAAGH;MAAQ,CAAC;IACjC;IACA,IAAG,CAACZ,OAAO,CAACY,OAAO,CAAC,EAAE;MAClBA,OAAO,GAAG,CAACA,OAAO,CAAC;IACvB;IACAd,IAAI,CAACc,OAAO,EAAE,UAASI,OAAO,EAAE;MAC5B,IAAIjB,UAAU,CAACiB,OAAO,CAAC,EAAE;QACrBA,OAAO,GAAG;UAAED,KAAK,EAAGC;QAAQ,CAAC;MACjC;MACAX,OAAO,CAACM,CAAC,CAAC,CAACM,UAAU,CAACD,OAAO,CAAC;IAClC,CAAC,CAAC;IAEF,OAAO,IAAI;EACf,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;EACIE,UAAU,EAAG,UAASP,CAAC,EAAEK,OAAO,EAAE;IAC9B,IAAIG,KAAK,GAAG,IAAI,CAACd,OAAO,CAACM,CAAC,CAAC;IAE3B,IAAGQ,KAAK,EAAE;MACN,IAAGH,OAAO,EAAE;QACRG,KAAK,CAACC,aAAa,CAACJ,OAAO,CAAC;MAChC,CAAC,MACI;QACDG,KAAK,CAACE,KAAK,EAAE;QACb,OAAO,IAAI,CAAChB,OAAO,CAACM,CAAC,CAAC;MAC1B;IACJ;IAEA,OAAO,IAAI;EACf;AACJ,CAAC;AAEDW,MAAM,CAACC,OAAO,GAAGtB,kBAAkB"},"metadata":{},"sourceType":"script","externalDependencies":[]}